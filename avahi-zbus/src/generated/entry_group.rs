//! # D-Bus interface proxy for: `org.freedesktop.Avahi.EntryGroup`
//!
//! This code was generated by `zbus-xmlgen` `4.1.0` from D-Bus introspection data.
//! Source: `org.freedesktop.Avahi.EntryGroup.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::IntrospectableProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::{proxy, zvariant::Optional};

use crate::{DnsClass, DnsType, EntryGroupState, InterfaceIndex, Protocol, Ttl};
#[proxy(
    interface = "org.freedesktop.Avahi.EntryGroup",
    default_service = "org.freedesktop.Avahi"
)]
pub trait EntryGroup {
    /// AddAddress method
    fn add_address(
        &self,
        interface: Optional<InterfaceIndex>,
        protocol: Protocol,
        flags: u32,
        name: &str,
        address: &str,
    ) -> zbus::Result<()>;

    /// AddRecord method
    #[allow(clippy::too_many_arguments)]
    fn add_record(
        &self,
        interface: Optional<InterfaceIndex>,
        protocol: Protocol,
        flags: u32,
        name: &str,
        clazz: DnsClass,
        type_: DnsType,
        ttl: Ttl,
        rdata: &[u8],
    ) -> zbus::Result<()>;

    /// AddService method
    #[allow(clippy::too_many_arguments)]
    fn add_service(
        &self,
        interface: Optional<InterfaceIndex>,
        protocol: Protocol,
        flags: u32,
        name: &str,
        type_: &str,
        domain: &str,
        host: &str,
        port: u16,
        txt: &[&[u8]],
    ) -> zbus::Result<()>;

    /// AddServiceSubtype method
    #[allow(clippy::too_many_arguments)]
    fn add_service_subtype(
        &self,
        interface: Optional<InterfaceIndex>,
        protocol: Protocol,
        flags: u32,
        name: &str,
        type_: &str,
        domain: &str,
        subtype: &str,
    ) -> zbus::Result<()>;

    /// Commit method
    fn commit(&self) -> zbus::Result<()>;

    /// Free method
    fn free(&self) -> zbus::Result<()>;

    /// GetState method
    fn get_state(&self) -> zbus::Result<EntryGroupState>;

    /// IsEmpty method
    fn is_empty(&self) -> zbus::Result<bool>;

    /// Reset method
    fn reset(&self) -> zbus::Result<()>;

    /// UpdateServiceTxt method
    #[allow(clippy::too_many_arguments)]
    fn update_service_txt(
        &self,
        interface: Optional<InterfaceIndex>,
        protocol: Protocol,
        flags: u32,
        name: &str,
        type_: &str,
        domain: &str,
        txt: &[&[u8]],
    ) -> zbus::Result<()>;

    /// StateChanged signal
    #[zbus(signal)]
    fn state_changed(&self, state: EntryGroupState, error: &str) -> zbus::Result<()>;
}
