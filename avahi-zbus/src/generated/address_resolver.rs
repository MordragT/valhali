//! # D-Bus interface proxy for: `org.freedesktop.Avahi.AddressResolver`
//!
//! This code was generated by `zbus-xmlgen` `4.1.0` from D-Bus introspection data.
//! Source: `org.freedesktop.Avahi.AddressResolver.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::IntrospectableProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::{proxy, zvariant::Optional};

use crate::{InterfaceIndex, Protocol};
#[proxy(
    interface = "org.freedesktop.Avahi.AddressResolver",
    default_service = "org.freedesktop.Avahi"
)]
pub trait AddressResolver {
    /// Free method
    fn free(&self) -> zbus::Result<()>;

    /// Start method
    fn start(&self) -> zbus::Result<()>;

    /// Failure signal
    #[zbus(signal)]
    fn failure(&self, error: &str) -> zbus::Result<()>;

    /// Found signal
    #[zbus(signal)]
    fn found(
        &self,
        interface: Optional<InterfaceIndex>,
        protocol: Protocol,
        aprotocol: Protocol,
        address: &str,
        name: &str,
        flags: u32,
    ) -> zbus::Result<()>;
}
